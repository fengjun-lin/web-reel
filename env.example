# Example Environment Configuration for Next.js 16
# Copy this file to .env.local and fill in your actual values

# ============================================
# Jira Configuration
# ============================================
# For creating Jira tickets from replay sessions

# Server-side only (NOT exposed to browser - more secure)
JIRA_API_KEY=your_jira_api_token_here
JIRA_USER_EMAIL=your.email@example.com

# Client-side (exposed to browser - optional, defaults provided)
NEXT_PUBLIC_JIRA_DOMAIN=web-reel.atlassian.net
NEXT_PUBLIC_JIRA_PROJECT_KEY=WR

# How to get Jira API token:
# 1. Log in to https://id.atlassian.com/manage-profile/security/api-tokens
# 2. Click "Create API token"
# 3. Copy the generated token

# ============================================
# OpenAI Configuration
# ============================================
# For AI-powered session analysis

# Server-side only (NOT exposed to browser - more secure)
OPENAI_API_KEY=sk-your-openai-api-key-here

# Client-side (exposed to browser - optional, defaults provided)
NEXT_PUBLIC_OPENAI_API_BASE=https://api.openai.com/v1
NEXT_PUBLIC_OPENAI_MODEL=gpt-4o-mini

# Alternative models you can use:
# - gpt-4o-mini (default, fast and cheap)
# - gpt-4o (more capable, slower, more expensive)
# - gpt-3.5-turbo (fastest, cheapest, less capable)

# How to get OpenAI API key:
# 1. Visit https://platform.openai.com/api-keys
# 2. Click "Create new secret key"
# 3. Copy the generated key

# ============================================
# Database Configuration (Neon Postgres)
# ============================================
# For storing application data

# Server-side only (contains sensitive connection info)
DATABASE_URL=postgresql://username:password@hostname/database?sslmode=require

# How to get Neon Postgres DATABASE_URL:
# 1. Sign up at https://neon.tech
# 2. Create a new project
# 3. Copy the connection string from your project dashboard
# 4. The connection string format is:
#    postgresql://[user]:[password]@[host]/[database]?sslmode=require
#
# Example connection string:
# postgresql://user:abc123xyz@ep-example-123456.us-east-2.aws.neon.tech/neondb?sslmode=require

# ============================================
# Vercel Blob Storage Configuration
# ============================================
# For storing session replay files

# Server-side only (NOT exposed to browser - more secure)
BLOB_READ_WRITE_TOKEN=vercel_blob_rw_your_token_here

# How to get Vercel Blob token:
# 1. Visit your Vercel project dashboard
# 2. Go to Storage > Blob
# 3. Create a new Blob store if you haven't already
# 4. Copy the BLOB_READ_WRITE_TOKEN from the store settings
# 5. Documentation: https://vercel.com/docs/storage/vercel-blob/quickstart

# ============================================
# Security Best Practices
# ============================================
# IMPORTANT:
# 1. NEVER commit .env.local to version control!
#    (It's already in .gitignore for your safety)
#
# 2. Server-side vs Client-side variables:
#    - Server-side (no prefix): Secure, only available on server
#      Examples: OPENAI_API_KEY, JIRA_API_KEY, JIRA_USER_EMAIL
#
#    - Client-side (NEXT_PUBLIC_ prefix): Exposed to browser
#      Examples: NEXT_PUBLIC_JIRA_DOMAIN, NEXT_PUBLIC_OPENAI_MODEL
#
# 3. Always use server-side variables for sensitive data like API keys
#
# 4. After adding/changing env vars, restart the dev server:
#    npm run dev

# ============================================
# Quick Setup
# ============================================
# For quick OpenAI setup, run:
#   ./scripts/setup-openai.sh
#
# To check your configuration:
#   ./scripts/check-openai.sh
#
# To initialize the database (creates tables):
#   npm run db:init
#   (WARNING: This will drop and recreate all tables!)
